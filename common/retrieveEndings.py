#!/usr/bin/env python
# -*- coding: utf-8 -*-

import hfst
import json
from collections import defaultdict


demonstrativeEndings = {
"over there or going away":{
	"extended":(["au포g[DemPro]"], ["ava[DemAdv]"]),  
	"restricted":(["ing[DemPro]"], ["yaa[DemAdv]"]),
	"obscured":(["am[DemPro]"], ["ama[DemAdv]"]),
},
"across there":{
	"extended":(["ag[DemPro]"], ["agaa[DemAdv]", "ii[DemAdv]"]),
	"restricted":(["ik[DemPro]", "ikegg[DemPro]"], ["ika[DemAdv]"]),  
	"obscured":(["akem[DemPro]"], ["akma[DemAdv]"]),
},                                                        
"up the slope":{
	"extended":(["pau포g[DemPro]"], ["pava[DemAdv]"]),  
	"restricted":(["ping[DemPro]"], ["pia[DemAdv]"]),
	"obscured":(["pam[DemPro]"], ["pama[DemAdv]"]),
},
"up above":{
	"extended":(["pag[DemPro]"], ["pagaa[DemAdv]", "pii[DemAdv]"]),
	"restricted":(["pik[DemPro]", "pikegg[DemPro]"], ["pika[DemAdv]"]), 
	"obscured":(["pakem[DemPro]"], ["pakma[DemAdv]"]),
},
"inside, inland, or upriver":{
	"extended":(["qau포g[DemPro]"], ["qava[DemAdv]"]),
	"restricted":(["kiug[DemPro]", "kiu포g[DemPro]"], ["kia[DemAdv]"]),
	"obscured":(["qam[DemPro]"], ["qama[DemAdv]"]),  
},
"outside":{
	"extended":(["qag[DemPro]"], ["qagaa[DemAdv]", "qii[DemAdv]"]),
	"restricted":(["kegg[DemPro]"], ["kegga[DemAdv]"]), 
	"obscured":(["qakem[DemPro]"], ["qakma[DemAdv]"]),
},
"down below or down the slope":{
	"extended":(["un[DemPro]"], ["una[DemAdv]"]), 
	"restricted":(["kan[DemPro]"], ["kana[DemAdv]"]),
	"obscured":(["cam[DemPro]"], ["cama[DemAdv]"]),
},
"downriver or near the exit":{
	"extended":(["uneg[DemPro]"], ["un'ga[DemAdv]", "un'gaa[DemAdv]"]),
	"restricted":(["ug[DemPro]"], ["ua[DemAdv]"]),
	"obscured":(["cakem[DemPro]"], ["cakma[DemAdv]"]),
},
"here, near speaker":{
	"extended":(["man[DemPro]"], ["maa[DemAdv]"]),
	"restricted":(["u[DemPro]"], ["wa[DemAdv]"]), 
	"obscured":(["im[DemPro]"], ["ima[DemAdv]"]),
},
"there, near listener or in context":{
	"extended":(["tama[DemPro]"], ["tamaa[DemAdv]"]),
	"restricted":(["tau[DemPro]"], ["tua[DemAdv]", "tava[DemAdv]"]),                        
},                                               
"coming this way":{
	"extended":(["uk[DemPro]"], ["uka[DemAdv]"]), 
},
}

pronounForms = [
	("[Abs][SgUnpd]", "absolutive singular (1)"),
	("[Abs][DuUnpd]", "absolutive dual (2)"),
	("[Abs][PlUnpd]", "absolutive plural (3+)"),
	("[Rel][SgUnpd]", "relative singular (1)"),
	("[Rel][DuUnpd]", "relative dual (2)"),
	("[Rel][PlUnpd]", "relative plural (3+)"),
	("[Abl_Mod][SgUnpd]", "ablative-modalis singular (1)"),
	("[Abl_Mod][DuUnpd]", "ablative-modalis dual (2)"),
	("[Abl_Mod][PlUnpd]", "ablative-modalis plural (3+)"),
	("[Loc][SgUnpd]", "localis singular (1)"),
	("[Loc][DuUnpd]", "localis dual (2)"),
	("[Loc][PlUnpd]", "localis plural (3+)"),
	("[Ter][SgUnpd]", "terminalis singular (1)"),
	("[Ter][DuUnpd]", "terminalis dual (2)"),
	("[Ter][PlUnpd]", "terminalis plural (3+)"),
	("[Via][SgUnpd]", "vialis singular (1)"),
	("[Via][DuUnpd]", "vialis dual (2)"),
	("[Via][PlUnpd]", "vialis plural (3+)"),
	("[Equ][SgUnpd]", "equalis singular (1)"),
	("[Equ][DuUnpd]", "equalis dual (2)"),
	("[Equ][PlUnpd]", "equalis plural (3+)"),
	("[Voc][SgUnpd]", "vocative singular (1)"),
	("[Voc][DuUnpd]", "vocative dual (2)"),
	("[Voc][PlUnpd]", "vocative plural (3+)"),
]

adverbForms = [
	("[Loc]", "localis"),
	("[Ter]", "terminalis"),
	("[Sec_Ter]", "second terminalis"),
	("[Abl]", "ablative"),
	("[Via]", "vialis"),
	("=i[Encl]", "predicative form"),
]

wang = "wang[PerPro]"
ell = "ell[PerPro]"
cases = ["[Abs]","[Rel]","[Abl_Mod]","[Loc]","[Ter]","[Ter]","[Via]","[Equ]"]
persons = ["[1Sg]","[2Sg]","[3Sg]","[4Sg]","[1Du]","[2Du]","[3Du]","[4Du]","[1Pl]","[2Pl]","[3Pl]","[4Pl]"]


input_stream2 = hfst.HfstInputStream('static/esu.seg.gen.hfstol')
transducer_seg_gen = input_stream2.read()
input_stream2.close()


# demonstrative = {dimension:{extended:{"[Abs][SgUnpd]":["ik>na","ikegg>na"]}}}
demonstratives = {}
for dimension, extResObsTypes in demonstrativeEndings.items():
	demonstratives[dimension] = {}
	for extendedRestrictedObscured, proAdvTypes in extResObsTypes.items():
		forms = defaultdict(set)
		pronouns, adverbs = proAdvTypes
		for pronoun in pronouns:
			for pronounForm, endingEnglish in pronounForms:
				forms[pronounForm] = forms[pronounForm].union(set([x[0] for x in list(transducer_seg_gen.lookup(pronoun+"-"+pronounForm))]))
		for adverb in adverbs:
			for adverbForm, endingEnglish in adverbForms:
				forms[adverbForm] = forms[adverbForm].union(set([x[0] for x in list(transducer_seg_gen.lookup(adverb+"-"+adverbForm))]))

		demonstratives[dimension][extendedRestrictedObscured] = {key:list(value) for key, value in forms.items()}

# def set_default(obj):
#     if isinstance(obj, set):
#         return list(obj)
#     raise TypeError

personalPronouns = defaultdict(list)
for case in cases:
	for person in persons:
		if "1" in person:
			personalPronouns[case+person] = [x[0] for x in list(transducer_seg_gen.lookup(wang+"-"+case+person))]
		else:
			personalPronouns[case+person] = [x[0] for x in list(transducer_seg_gen.lookup(ell+"-"+case+person))]

# print()
# print(json.dumps(demonstratives, default=set_default))
# print()
# print(json.dumps(personalPronouns))

#def retrieveEndings(mood)
moodType = [
"[Ind]",
"[Opt]",
"[Ptcp]",
"[Intrg]",
"[Sbrd]",
"[Abs]",
"[Rel]",
"[Abl_Mod]",
"[Loc]",
"[Ter]",
"[Via]",
"[Equ]",
"[Prec]",
"[Cnsq]",
"[Cont]",
"[Conc]",
"[Cond]",
"[CtmpI]",
"[CtmpII]",
]
endingsForNouns = [
"[SgUnpd]",
"[PlUnpd]",
"[DuUnpd]",
"[3SgPoss][SgPosd]",
"[3SgPoss][PlPosd]",
"[3SgPoss][DuPosd]",
"[3PlPoss][SgPosd]",
"[3PlPoss][PlPosd]",
"[3PlPoss][DuPosd]",
"[3DuPoss][SgPosd]",
"[3DuPoss][PlPosd]",
"[3DuPoss][DuPosd]",
"[1SgPoss][SgPosd]",
"[1SgPoss][PlPosd]",
"[1SgPoss][DuPosd]",
"[1PlPoss][SgPosd]",
"[1PlPoss][PlPosd]",
"[1PlPoss][DuPosd]",
"[1DuPoss][SgPosd]",
"[1DuPoss][PlPosd]",
"[1DuPoss][DuPosd]",
"[2SgPoss][SgPosd]",
"[2SgPoss][PlPosd]",
"[2SgPoss][DuPosd]",
"[2PlPoss][SgPosd]",
"[2PlPoss][PlPosd]",
"[2PlPoss][DuPosd]",
"[2DuPoss][SgPosd]",
"[2DuPoss][PlPosd]",
"[2DuPoss][DuPosd]",
"[4SgPoss][SgPosd]",
"[4SgPoss][PlPosd]",
"[4SgPoss][DuPosd]",
"[4PlPoss][SgPosd]",
"[4PlPoss][PlPosd]",
"[4PlPoss][DuPosd]",
"[4DuPoss][SgPosd]",
"[4DuPoss][PlPosd]",
"[4DuPoss][DuPosd]",
]
endingsForSubordinative = [
"[Intr][S_4Sg]",
"[Intr][S_1Sg]",
"[Intr][S_2Sg]",
"[Intr][S_4Pl]",
"[Intr][S_1Pl]",
"[Intr][S_2Pl]",
"[Intr][S_4Du]",
"[Intr][S_1Du]",
"[Intr][S_2Du]",
"[Trns][P_3Sg]",
"[Trns][P_3Pl]",
"[Trns][P_3Du]",
"[Trns][P_1Sg]",
"[Trns][P_1Pl]",
"[Trns][P_1Du]",
"[Trns][P_2Sg]",
"[Trns][P_2Pl]",
"[Trns][P_2Du]",
]
endingsForInterrogative = [
"[Intr][S_3Sg]",
"[Intr][S_1Sg]",
"[Intr][S_2Sg]",
"[Intr][S_3Pl]",
"[Intr][S_1Pl]",
"[Intr][S_2Pl]",
"[Intr][S_3Du]",
"[Intr][S_1Du]",
"[Intr][S_2Du]",
"[Trns][A_1Sg][P_2Sg]",
"[Trns][A_3Sg][P_3Sg]",
"[Trns][A_3Sg][P_3Pl]",
"[Trns][A_3Sg][P_3Du]",
"[Trns][A_3Pl][P_3Sg]",
"[Trns][A_3Pl][P_3Pl]",
"[Trns][A_3Pl][P_3Du]",
"[Trns][A_3Du][P_3Sg]",
"[Trns][A_3Du][P_3Pl]",
"[Trns][A_3Du][P_3Du]",
"[Trns][A_2Sg][P_3Sg]",
"[Trns][A_2Sg][P_3Pl]",
"[Trns][A_2Sg][P_3Du]",
"[Trns][A_2Pl][P_3Sg]",
"[Trns][A_2Pl][P_3Pl]",
"[Trns][A_2Pl][P_3Du]",
"[Trns][A_2Du][P_3Sg]",
"[Trns][A_2Du][P_3Pl]",
"[Trns][A_2Du][P_3Du]",
"[Trns][A_3Sg][P_1Sg]",
"[Trns][A_3Sg][P_1Pl]",
"[Trns][A_3Sg][P_1Du]",
"[Trns][A_3Pl][P_1Sg]",
"[Trns][A_3Pl][P_1Pl]",
"[Trns][A_3Pl][P_1Du]",
"[Trns][A_3Du][P_1Sg]",
"[Trns][A_3Du][P_1Pl]",
"[Trns][A_3Du][P_1Du]",
"[Trns][A_2Sg][P_1Sg]",
"[Trns][A_2Sg][P_1Pl]",
"[Trns][A_2Sg][P_1Du]",
"[Trns][A_2Pl][P_1Sg]",
"[Trns][A_2Pl][P_1Pl]",
"[Trns][A_2Pl][P_1Du]",
"[Trns][A_2Du][P_1Sg]",
"[Trns][A_2Du][P_1Pl]",
"[Trns][A_2Du][P_1Du]",
"[Trns][A_2Du][P_1Sg]",
"[Trns][A_2Sg][P_1Sg]",
"[Trns][A_2Sg][P_1Pl]",
"[Trns][A_2Sg][P_1Du]",
"[Trns][A_2Pl][P_1Sg]",
"[Trns][A_2Pl][P_1Pl]",
"[Trns][A_2Pl][P_1Du]",
"[Trns][A_2Du][P_1Sg]",
"[Trns][A_2Du][P_1Pl]",
"[Trns][A_2Du][P_1Du]",
"[Trns][A_2Du][P_1Sg]",
"[Trns][A_3Sg][P_2Sg]",
"[Trns][A_3Sg][P_2Pl]",
"[Trns][A_3Sg][P_2Du]",
"[Trns][A_3Pl][P_2Sg]",
"[Trns][A_3Pl][P_2Pl]",
"[Trns][A_3Pl][P_2Du]",
"[Trns][A_3Du][P_2Sg]",
"[Trns][A_3Du][P_2Pl]",
"[Trns][A_3Du][P_2Du]",
]
endingsForIndicativeParticipial = [
"[Intr][S_3Sg]",
"[Intr][S_1Sg]",
"[Intr][S_2Sg]",
"[Intr][S_3Pl]",
"[Intr][S_1Pl]",
"[Intr][S_2Pl]",
"[Intr][S_3Du]",
"[Intr][S_1Du]",
"[Intr][S_2Du]",
"[Trns][A_3Sg][P_3Sg]",
"[Trns][A_3Sg][P_3Pl]",
"[Trns][A_3Sg][P_3Du]",
"[Trns][A_3Pl][P_3Sg]",
"[Trns][A_3Pl][P_3Pl]",
"[Trns][A_3Pl][P_3Du]",
"[Trns][A_3Du][P_3Sg]",
"[Trns][A_3Du][P_3Pl]",
"[Trns][A_3Du][P_3Du]",
"[Trns][A_1Sg][P_3Sg]",
"[Trns][A_1Sg][P_3Pl]",
"[Trns][A_1Sg][P_3Du]",
"[Trns][A_1Pl][P_3Sg]",
"[Trns][A_1Pl][P_3Pl]",
"[Trns][A_1Pl][P_3Du]",
"[Trns][A_1Du][P_3Sg]",
"[Trns][A_1Du][P_3Pl]",
"[Trns][A_1Du][P_3Du]",
"[Trns][A_2Sg][P_3Sg]",
"[Trns][A_2Sg][P_3Pl]",
"[Trns][A_2Sg][P_3Du]",
"[Trns][A_2Pl][P_3Sg]",
"[Trns][A_2Pl][P_3Pl]",
"[Trns][A_2Pl][P_3Du]",
"[Trns][A_2Du][P_3Sg]",
"[Trns][A_2Du][P_3Pl]",
"[Trns][A_2Du][P_3Du]",
"[Trns][A_3Sg][P_1Sg]",
"[Trns][A_3Sg][P_1Pl]",
"[Trns][A_3Sg][P_1Du]",
"[Trns][A_3Pl][P_1Sg]",
"[Trns][A_3Pl][P_1Pl]",
"[Trns][A_3Pl][P_1Du]",
"[Trns][A_3Du][P_1Sg]",
"[Trns][A_3Du][P_1Pl]",
"[Trns][A_3Du][P_1Du]",
"[Trns][A_2Sg][P_1Sg]",
"[Trns][A_2Sg][P_1Pl]",
"[Trns][A_2Sg][P_1Du]",
"[Trns][A_2Pl][P_1Sg]",
"[Trns][A_2Pl][P_1Pl]",
"[Trns][A_2Pl][P_1Du]",
"[Trns][A_2Du][P_1Sg]",
"[Trns][A_2Du][P_1Pl]",
"[Trns][A_2Du][P_1Du]",
"[Trns][A_2Du][P_1Sg]",
"[Trns][A_2Sg][P_1Sg]",
"[Trns][A_2Sg][P_1Pl]",
"[Trns][A_2Sg][P_1Du]",
"[Trns][A_2Pl][P_1Sg]",
"[Trns][A_2Pl][P_1Pl]",
"[Trns][A_2Pl][P_1Du]",
"[Trns][A_2Du][P_1Sg]",
"[Trns][A_2Du][P_1Pl]",
"[Trns][A_2Du][P_1Du]",
"[Trns][A_2Du][P_1Sg]",
"[Trns][A_3Sg][P_2Sg]",
"[Trns][A_3Sg][P_2Pl]",
"[Trns][A_3Sg][P_2Du]",
"[Trns][A_3Pl][P_2Sg]",
"[Trns][A_3Pl][P_2Pl]",
"[Trns][A_3Pl][P_2Du]",
"[Trns][A_3Du][P_2Sg]",
"[Trns][A_3Du][P_2Pl]",
"[Trns][A_3Du][P_2Du]",
"[Trns][A_1Sg][P_2Sg]",
"[Trns][A_1Sg][P_2Pl]",
"[Trns][A_1Sg][P_2Du]",
"[Trns][A_1Pl][P_2Sg]",
"[Trns][A_1Pl][P_2Pl]",
"[Trns][A_1Pl][P_2Du]",
"[Trns][A_1Du][P_2Sg]",
"[Trns][A_1Du][P_2Pl]",
"[Trns][A_1Du][P_2Du]",
]
endingsForOptative = [
"[Intr][PRS][S_3Sg]",
"[Intr][PRS][S_1Sg]",
"[Intr][PRS][S_2Sg]",
"[Intr][PRS][S_3Pl]",
"[Intr][PRS][S_1Pl]",
"[Intr][PRS][S_2Pl]",
"[Intr][PRS][S_3Du]",
"[Intr][PRS][S_1Du]",
"[Intr][PRS][S_2Du]",
"[Trns][PRS][A_3Sg][P_3Sg]",
"[Trns][PRS][A_3Sg][P_3Pl]",
"[Trns][PRS][A_3Sg][P_3Du]",
"[Trns][PRS][A_3Pl][P_3Sg]",
"[Trns][PRS][A_3Pl][P_3Pl]",
"[Trns][PRS][A_3Pl][P_3Du]",
"[Trns][PRS][A_3Du][P_3Sg]",
"[Trns][PRS][A_3Du][P_3Pl]",
"[Trns][PRS][A_3Du][P_3Du]",
"[Trns][PRS][A_1Sg][P_3Sg]",
"[Trns][PRS][A_1Sg][P_3Pl]",
"[Trns][PRS][A_1Sg][P_3Du]",
"[Trns][PRS][A_1Pl][P_3Sg]",
"[Trns][PRS][A_1Pl][P_3Pl]",
"[Trns][PRS][A_1Pl][P_3Du]",
"[Trns][PRS][A_1Du][P_3Sg]",
"[Trns][PRS][A_1Du][P_3Pl]",
"[Trns][PRS][A_1Du][P_3Du]",
"[Trns][PRS][A_2Sg][P_3Sg]",
"[Trns][PRS][A_2Sg][P_3Pl]",
"[Trns][PRS][A_2Sg][P_3Du]",
"[Trns][PRS][A_2Pl][P_3Sg]",
"[Trns][PRS][A_2Pl][P_3Pl]",
"[Trns][PRS][A_2Pl][P_3Du]",
"[Trns][PRS][A_2Du][P_3Sg]",
"[Trns][PRS][A_2Du][P_3Pl]",
"[Trns][PRS][A_2Du][P_3Du]",
"[Trns][PRS][A_3Sg][P_1Sg]",
"[Trns][PRS][A_3Sg][P_1Pl]",
"[Trns][PRS][A_3Sg][P_1Du]",
"[Trns][PRS][A_3Pl][P_1Sg]",
"[Trns][PRS][A_3Pl][P_1Pl]",
"[Trns][PRS][A_3Pl][P_1Du]",
"[Trns][PRS][A_3Du][P_1Sg]",
"[Trns][PRS][A_3Du][P_1Pl]",
"[Trns][PRS][A_3Du][P_1Du]",
"[Trns][PRS][A_2Sg][P_1Sg]",
"[Trns][PRS][A_2Sg][P_1Pl]",
"[Trns][PRS][A_2Sg][P_1Du]",
"[Trns][PRS][A_2Pl][P_1Sg]",
"[Trns][PRS][A_2Pl][P_1Pl]",
"[Trns][PRS][A_2Pl][P_1Du]",
"[Trns][PRS][A_2Du][P_1Sg]",
"[Trns][PRS][A_2Du][P_1Pl]",
"[Trns][PRS][A_2Du][P_1Du]",
"[Trns][PRS][A_3Sg][P_2Sg]",
"[Trns][PRS][A_3Sg][P_2Pl]",
"[Trns][PRS][A_3Sg][P_2Du]",
"[Trns][PRS][A_3Pl][P_2Sg]",
"[Trns][PRS][A_3Pl][P_2Pl]",
"[Trns][PRS][A_3Pl][P_2Du]",
"[Trns][PRS][A_3Du][P_2Sg]",
"[Trns][PRS][A_3Du][P_2Pl]",
"[Trns][PRS][A_3Du][P_2Du]",
"[Trns][PRS][A_1Sg][P_2Sg]",
"[Trns][PRS][A_1Sg][P_2Pl]",
"[Trns][PRS][A_1Sg][P_2Du]",
"[Trns][PRS][A_1Pl][P_2Sg]",
"[Trns][PRS][A_1Pl][P_2Pl]",
"[Trns][PRS][A_1Pl][P_2Du]",
"[Trns][PRS][A_1Du][P_2Sg]",
"[Trns][PRS][A_1Du][P_2Pl]",
"[Trns][PRS][A_1Du][P_2Du]",
"[Intr][FUT][S_3Sg]",
"[Intr][FUT][S_1Sg]",
"[Intr][FUT][S_2Sg]",
"[Intr][FUT][S_3Pl]",
"[Intr][FUT][S_1Pl]",
"[Intr][FUT][S_2Pl]",
"[Intr][FUT][S_3Du]",
"[Intr][FUT][S_1Du]",
"[Intr][FUT][S_2Du]",
"[Trns][FUT][A_3Sg][P_3Sg]",
"[Trns][FUT][A_3Sg][P_3Pl]",
"[Trns][FUT][A_3Sg][P_3Du]",
"[Trns][FUT][A_3Pl][P_3Sg]",
"[Trns][FUT][A_3Pl][P_3Pl]",
"[Trns][FUT][A_3Pl][P_3Du]",
"[Trns][FUT][A_3Du][P_3Sg]",
"[Trns][FUT][A_3Du][P_3Pl]",
"[Trns][FUT][A_3Du][P_3Du]",
"[Trns][FUT][A_1Sg][P_3Sg]",
"[Trns][FUT][A_1Sg][P_3Pl]",
"[Trns][FUT][A_1Sg][P_3Du]",
"[Trns][FUT][A_1Pl][P_3Sg]",
"[Trns][FUT][A_1Pl][P_3Pl]",
"[Trns][FUT][A_1Pl][P_3Du]",
"[Trns][FUT][A_1Du][P_3Sg]",
"[Trns][FUT][A_1Du][P_3Pl]",
"[Trns][FUT][A_1Du][P_3Du]",
"[Trns][FUT][A_2Sg][P_3Sg]",
"[Trns][FUT][A_2Sg][P_3Pl]",
"[Trns][FUT][A_2Sg][P_3Du]",
"[Trns][FUT][A_2Pl][P_3Sg]",
"[Trns][FUT][A_2Pl][P_3Pl]",
"[Trns][FUT][A_2Pl][P_3Du]",
"[Trns][FUT][A_2Du][P_3Sg]",
"[Trns][FUT][A_2Du][P_3Pl]",
"[Trns][FUT][A_2Du][P_3Du]",
"[Trns][FUT][A_3Sg][P_1Sg]",
"[Trns][FUT][A_3Sg][P_1Pl]",
"[Trns][FUT][A_3Sg][P_1Du]",
"[Trns][FUT][A_3Pl][P_1Sg]",
"[Trns][FUT][A_3Pl][P_1Pl]",
"[Trns][FUT][A_3Pl][P_1Du]",
"[Trns][FUT][A_3Du][P_1Sg]",
"[Trns][FUT][A_3Du][P_1Pl]",
"[Trns][FUT][A_3Du][P_1Du]",
"[Trns][FUT][A_2Sg][P_1Sg]",
"[Trns][FUT][A_2Sg][P_1Pl]",
"[Trns][FUT][A_2Sg][P_1Du]",
"[Trns][FUT][A_2Pl][P_1Sg]",
"[Trns][FUT][A_2Pl][P_1Pl]",
"[Trns][FUT][A_2Pl][P_1Du]",
"[Trns][FUT][A_2Du][P_1Sg]",
"[Trns][FUT][A_2Du][P_1Pl]",
"[Trns][FUT][A_2Du][P_1Du]",
"[Trns][FUT][A_3Sg][P_2Sg]",
"[Trns][FUT][A_3Sg][P_2Pl]",
"[Trns][FUT][A_3Sg][P_2Du]",
"[Trns][FUT][A_3Pl][P_2Sg]",
"[Trns][FUT][A_3Pl][P_2Pl]",
"[Trns][FUT][A_3Pl][P_2Du]",
"[Trns][FUT][A_3Du][P_2Sg]",
"[Trns][FUT][A_3Du][P_2Pl]",
"[Trns][FUT][A_3Du][P_2Du]",
"[Trns][FUT][A_1Sg][P_2Sg]",
"[Trns][FUT][A_1Sg][P_2Pl]",
"[Trns][FUT][A_1Sg][P_2Du]",
"[Trns][FUT][A_1Pl][P_2Sg]",
"[Trns][FUT][A_1Pl][P_2Pl]",
"[Trns][FUT][A_1Pl][P_2Du]",
"[Trns][FUT][A_1Du][P_2Sg]",
"[Trns][FUT][A_1Du][P_2Pl]",
"[Trns][FUT][A_1Du][P_2Du]",
"[Intr][PRS][NEG][S_2Sg]",
"[Intr][PRS][NEG][S_2Pl]",
"[Intr][PRS][NEG][S_2Du]",
"[Trns][PRS][NEG][A_2Sg][P_3Sg]",
"[Trns][PRS][NEG][A_2Sg][P_3Pl]",
"[Trns][PRS][NEG][A_2Sg][P_3Du]",
"[Trns][PRS][NEG][A_2Pl][P_3Sg]",
"[Trns][PRS][NEG][A_2Pl][P_3Pl]",
"[Trns][PRS][NEG][A_2Pl][P_3Du]",
"[Trns][PRS][NEG][A_2Du][P_3Sg]",
"[Trns][PRS][NEG][A_2Du][P_3Pl]",
"[Trns][PRS][NEG][A_2Du][P_3Du]",
"[Trns][PRS][NEG][A_2Sg][P_1Sg]",
"[Trns][PRS][NEG][A_2Sg][P_1Pl]",
"[Trns][PRS][NEG][A_2Sg][P_1Du]",
"[Trns][PRS][NEG][A_2Pl][P_1Sg]",
"[Trns][PRS][NEG][A_2Pl][P_1Pl]",
"[Trns][PRS][NEG][A_2Pl][P_1Du]",
"[Trns][PRS][NEG][A_2Du][P_1Sg]",
"[Trns][PRS][NEG][A_2Du][P_1Pl]",
"[Trns][PRS][NEG][A_2Du][P_1Du]",
"[Intr][FUT][NEG][S_2Sg]",
"[Intr][FUT][NEG][S_2Pl]",
"[Intr][FUT][NEG][S_2Du]",
"[Trns][FUT][NEG][A_2Sg][P_3Sg]",
"[Trns][FUT][NEG][A_2Sg][P_3Pl]",
"[Trns][FUT][NEG][A_2Sg][P_3Du]",
"[Trns][FUT][NEG][A_2Pl][P_3Sg]",
"[Trns][FUT][NEG][A_2Pl][P_3Pl]",
"[Trns][FUT][NEG][A_2Pl][P_3Du]",
"[Trns][FUT][NEG][A_2Du][P_3Sg]",
"[Trns][FUT][NEG][A_2Du][P_3Pl]",
"[Trns][FUT][NEG][A_2Du][P_3Du]",
"[Trns][FUT][NEG][A_2Sg][P_1Sg]",
"[Trns][FUT][NEG][A_2Sg][P_1Pl]",
"[Trns][FUT][NEG][A_2Sg][P_1Du]",
"[Trns][FUT][NEG][A_2Pl][P_1Sg]",
"[Trns][FUT][NEG][A_2Pl][P_1Pl]",
"[Trns][FUT][NEG][A_2Pl][P_1Du]",
"[Trns][FUT][NEG][A_2Du][P_1Sg]",
"[Trns][FUT][NEG][A_2Du][P_1Pl]",
"[Trns][FUT][NEG][A_2Du][P_1Du]",
]

endingsForConnective = [
"[Intr][S_3Sg]",
"[Intr][S_1Sg]",
"[Intr][S_2Sg]",
"[Intr][S_4Sg]",
"[Intr][S_3Pl]",
"[Intr][S_1Pl]",
"[Intr][S_2Pl]",
"[Intr][S_4Pl]",
"[Intr][S_3Du]",
"[Intr][S_1Du]",
"[Intr][S_2Du]",
"[Intr][S_4Du]",
"[Trns][A_3Sg][P_3Sg]",
"[Trns][A_3Sg][P_3Pl]",
"[Trns][A_3Sg][P_3Du]",
"[Trns][A_3Pl][P_3Sg]",
"[Trns][A_3Pl][P_3Pl]",
"[Trns][A_3Pl][P_3Du]",
"[Trns][A_3Du][P_3Sg]",
"[Trns][A_3Du][P_3Pl]",
"[Trns][A_3Du][P_3Du]",
"[Trns][A_1Sg][P_3Sg]",
"[Trns][A_1Sg][P_3Pl]",
"[Trns][A_1Sg][P_3Du]",
"[Trns][A_1Pl][P_3Sg]",
"[Trns][A_1Pl][P_3Pl]",
"[Trns][A_1Pl][P_3Du]",
"[Trns][A_1Du][P_3Sg]",
"[Trns][A_1Du][P_3Pl]",
"[Trns][A_1Du][P_3Du]",
"[Trns][A_2Sg][P_3Sg]",
"[Trns][A_2Sg][P_3Pl]",
"[Trns][A_2Sg][P_3Du]",
"[Trns][A_2Pl][P_3Sg]",
"[Trns][A_2Pl][P_3Pl]",
"[Trns][A_2Pl][P_3Du]",
"[Trns][A_2Du][P_3Sg]",
"[Trns][A_2Du][P_3Pl]",
"[Trns][A_2Du][P_3Du]",
"[Trns][A_4Sg][P_3Sg]",
"[Trns][A_4Sg][P_3Pl]",
"[Trns][A_4Sg][P_3Du]",
"[Trns][A_4Pl][P_3Sg]",
"[Trns][A_4Pl][P_3Pl]",
"[Trns][A_4Pl][P_3Du]",
"[Trns][A_4Du][P_3Sg]",
"[Trns][A_4Du][P_3Pl]",
"[Trns][A_4Du][P_3Du]",
"[Trns][A_3Sg][P_1Sg]",
"[Trns][A_3Sg][P_1Pl]",
"[Trns][A_3Sg][P_1Du]",
"[Trns][A_3Pl][P_1Sg]",
"[Trns][A_3Pl][P_1Pl]",
"[Trns][A_3Pl][P_1Du]",
"[Trns][A_3Du][P_1Sg]",
"[Trns][A_3Du][P_1Pl]",
"[Trns][A_3Du][P_1Du]",
"[Trns][A_2Sg][P_1Sg]",
"[Trns][A_2Sg][P_1Pl]",
"[Trns][A_2Sg][P_1Du]",
"[Trns][A_2Pl][P_1Sg]",
"[Trns][A_2Pl][P_1Pl]",
"[Trns][A_2Pl][P_1Du]",
"[Trns][A_2Du][P_1Sg]",
"[Trns][A_2Du][P_1Pl]",
"[Trns][A_2Du][P_1Du]",
"[Trns][A_4Sg][P_1Sg]",
"[Trns][A_4Sg][P_1Pl]",
"[Trns][A_4Sg][P_1Du]",
"[Trns][A_4Pl][P_1Sg]",
"[Trns][A_4Pl][P_1Pl]",
"[Trns][A_4Pl][P_1Du]",
"[Trns][A_4Du][P_1Sg]",
"[Trns][A_4Du][P_1Pl]",
"[Trns][A_4Du][P_1Du]",
"[Trns][A_3Sg][P_2Sg]",
"[Trns][A_3Sg][P_2Pl]",
"[Trns][A_3Sg][P_2Du]",
"[Trns][A_3Pl][P_2Sg]",
"[Trns][A_3Pl][P_2Pl]",
"[Trns][A_3Pl][P_2Du]",
"[Trns][A_3Du][P_2Sg]",
"[Trns][A_3Du][P_2Pl]",
"[Trns][A_3Du][P_2Du]",
"[Trns][A_1Sg][P_2Sg]",
"[Trns][A_1Sg][P_2Pl]",
"[Trns][A_1Sg][P_2Du]",
"[Trns][A_1Pl][P_2Sg]",
"[Trns][A_1Pl][P_2Pl]",
"[Trns][A_1Pl][P_2Du]",
"[Trns][A_1Du][P_2Sg]",
"[Trns][A_1Du][P_2Pl]",
"[Trns][A_1Du][P_2Du]",
"[Trns][A_4Sg][P_2Sg]",
"[Trns][A_4Sg][P_2Pl]",
"[Trns][A_4Sg][P_2Du]",
"[Trns][A_4Pl][P_2Sg]",
"[Trns][A_4Pl][P_2Pl]",
"[Trns][A_4Pl][P_2Du]",
"[Trns][A_4Du][P_2Sg]",
"[Trns][A_4Du][P_2Pl]",
"[Trns][A_4Du][P_2Du]",
"[Trns][A_3Sg][P_4Sg]",
"[Trns][A_3Sg][P_4Pl]",
"[Trns][A_3Sg][P_4Du]",
"[Trns][A_3Pl][P_4Sg]",
"[Trns][A_3Pl][P_4Pl]",
"[Trns][A_3Pl][P_4Du]",
"[Trns][A_3Du][P_4Sg]",
"[Trns][A_3Du][P_4Pl]",
"[Trns][A_3Du][P_4Du]",
"[Trns][A_1Sg][P_4Sg]",
"[Trns][A_1Sg][P_4Pl]",
"[Trns][A_1Sg][P_4Du]",
"[Trns][A_1Pl][P_4Sg]",
"[Trns][A_1Pl][P_4Pl]",
"[Trns][A_1Pl][P_4Du]",
"[Trns][A_1Du][P_4Sg]",
"[Trns][A_1Du][P_4Pl]",
"[Trns][A_1Du][P_4Du]",
"[Trns][A_2Sg][P_4Sg]",
"[Trns][A_2Sg][P_4Pl]",
"[Trns][A_2Sg][P_4Du]",
"[Trns][A_2Pl][P_4Sg]",
"[Trns][A_2Pl][P_4Pl]",
"[Trns][A_2Pl][P_4Du]",
"[Trns][A_2Du][P_4Sg]",
"[Trns][A_2Du][P_4Pl]",
"[Trns][A_2Du][P_4Du]",
]

endingsForQuantQual = [
"[P_3Sg]",
"[P_3Pl]",
"[P_3Du]",
"[S_1Sg]",
"[S_1Pl]",
"[S_1Du]",
"[S_2Sg]",
"[S_2Pl]",
"[S_2Du]",
"[S_4Sg]",
"[S_4Pl]",
"[S_4Du]",
]

moodEndings = {
	"[Ind]": endingsForIndicativeParticipial,
	"[Ptcp]": endingsForIndicativeParticipial,
	"[Opt]": endingsForOptative,
	"[Intrg]": endingsForInterrogative,
	"[Sbrd]": endingsForSubordinative,
	"[Abs]": endingsForNouns,
	"[Rel]": endingsForNouns,
	"[Abl_Mod]": endingsForNouns,
	"[Loc]": endingsForNouns,
	"[Ter]": endingsForNouns,
	"[Via]": endingsForNouns,
	"[Equ]": endingsForNouns,
	"[Prec]": endingsForConnective,
	"[Cnsq]": endingsForConnective,
	"[Cont]": endingsForConnective,
	"[Conc]": endingsForConnective,
	"[Cond]": endingsForConnective,
	"[CtmpI]": endingsForConnective,
	"[CtmpII]": endingsForConnective,
	"[Quant_Qual]": endingsForQuantQual,
}
